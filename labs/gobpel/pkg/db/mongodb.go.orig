package db

import (
    "context"
    "errors"

    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/mongo/options"
    "gobpel/api"
)

var client *mongo.Client

// Initialize the MongoDB client
func InitMongoDB(uri string) error {
    var err error
    client, err = mongo.Connect(context.TODO(), options.Client().ApplyURI(uri))
    if err != nil {
        return err
    }
    return client.Ping(context.TODO(), nil)
}

func CreateProcess(process *api.Process) (*api.Process, error) {
    collection := client.Database("yourdatabase").Collection("processes")
    _, err := collection.InsertOne(context.Background(), process)
    if err != nil {
        return nil, err
    }
    return process, nil
}

func GetProcess(processId string) (*api.Process, error) {
    collection := client.Database("yourdatabase").Collection("processes")
    filter := bson.M{"processId": processId}
    var process api.Process
    err := collection.FindOne(context.Background(), filter).Decode(&process)
    if err != nil {
        return nil, err
    }
    return &process, nil
}

func UpdateProcess(process *api.Process) (*api.Process, error) {
    collection := client.Database("yourdatabase").Collection("processes")
    filter := bson.M{"processId": process.Name} // Assuming Name is the unique identifier
    update := bson.M{"$set": process}
    _, err := collection.UpdateOne(context.Background(), filter, update)
    if err != nil {
        return nil, err
    }
    return process, nil
}

func DeleteProcess(processId string) (bool, error) {
    collection := client.Database("yourdatabase").Collection("processes")
    filter := bson.M{"processId": processId}
    result, err := collection.DeleteOne(context.Background(), filter)
    if err != nil {
        return false, err
    }
    if result.DeletedCount == 0 {
        return false, errors.New("no documents deleted")
    }
    return true, nil
}

