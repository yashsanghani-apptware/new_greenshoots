// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/bpel.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BPELProcessService_CreateProcess_FullMethodName      = "/bpel.BPELProcessService/CreateProcess"
	BPELProcessService_GetProcess_FullMethodName         = "/bpel.BPELProcessService/GetProcess"
	BPELProcessService_UpdateProcess_FullMethodName      = "/bpel.BPELProcessService/UpdateProcess"
	BPELProcessService_DeleteProcess_FullMethodName      = "/bpel.BPELProcessService/DeleteProcess"
	BPELProcessService_DeleteAllProcesses_FullMethodName = "/bpel.BPELProcessService/DeleteAllProcesses"
	BPELProcessService_GetAllProcesses_FullMethodName    = "/bpel.BPELProcessService/GetAllProcesses"
	BPELProcessService_ExecuteProcess_FullMethodName     = "/bpel.BPELProcessService/ExecuteProcess"
	BPELProcessService_Publish_FullMethodName            = "/bpel.BPELProcessService/Publish"
	BPELProcessService_Subscribe_FullMethodName          = "/bpel.BPELProcessService/Subscribe"
	BPELProcessService_GetProcessStatus_FullMethodName   = "/bpel.BPELProcessService/GetProcessStatus"
)

// BPELProcessServiceClient is the client API for BPELProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BPELProcessServiceClient interface {
	CreateProcess(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Process, error)
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*Process, error)
	UpdateProcess(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Process, error)
	DeleteProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAllProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProcessesResponse, error)
	ExecuteProcess(ctx context.Context, in *ExecuteProcessRequest, opts ...grpc.CallOption) (*ExecuteProcessResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProcessStatus(ctx context.Context, in *GetProcessStatusRequest, opts ...grpc.CallOption) (*GetProcessStatusResponse, error)
}

type bPELProcessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBPELProcessServiceClient(cc grpc.ClientConnInterface) BPELProcessServiceClient {
	return &bPELProcessServiceClient{cc}
}

func (c *bPELProcessServiceClient) CreateProcess(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Process, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Process)
	err := c.cc.Invoke(ctx, BPELProcessService_CreateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*Process, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Process)
	err := c.cc.Invoke(ctx, BPELProcessService_GetProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) UpdateProcess(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Process, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Process)
	err := c.cc.Invoke(ctx, BPELProcessService_UpdateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) DeleteProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BPELProcessService_DeleteProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) DeleteAllProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BPELProcessService_DeleteAllProcesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) GetAllProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProcessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProcessesResponse)
	err := c.cc.Invoke(ctx, BPELProcessService_GetAllProcesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) ExecuteProcess(ctx context.Context, in *ExecuteProcessRequest, opts ...grpc.CallOption) (*ExecuteProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteProcessResponse)
	err := c.cc.Invoke(ctx, BPELProcessService_ExecuteProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BPELProcessService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BPELProcessService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bPELProcessServiceClient) GetProcessStatus(ctx context.Context, in *GetProcessStatusRequest, opts ...grpc.CallOption) (*GetProcessStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessStatusResponse)
	err := c.cc.Invoke(ctx, BPELProcessService_GetProcessStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BPELProcessServiceServer is the server API for BPELProcessService service.
// All implementations must embed UnimplementedBPELProcessServiceServer
// for forward compatibility
type BPELProcessServiceServer interface {
	CreateProcess(context.Context, *Process) (*Process, error)
	GetProcess(context.Context, *GetProcessRequest) (*Process, error)
	UpdateProcess(context.Context, *Process) (*Process, error)
	DeleteProcess(context.Context, *GetProcessRequest) (*emptypb.Empty, error)
	DeleteAllProcesses(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetAllProcesses(context.Context, *emptypb.Empty) (*GetAllProcessesResponse, error)
	ExecuteProcess(context.Context, *ExecuteProcessRequest) (*ExecuteProcessResponse, error)
	Publish(context.Context, *PublishRequest) (*emptypb.Empty, error)
	Subscribe(context.Context, *SubscribeRequest) (*emptypb.Empty, error)
	GetProcessStatus(context.Context, *GetProcessStatusRequest) (*GetProcessStatusResponse, error)
	mustEmbedUnimplementedBPELProcessServiceServer()
}

// UnimplementedBPELProcessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBPELProcessServiceServer struct {
}

func (UnimplementedBPELProcessServiceServer) CreateProcess(context.Context, *Process) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcess not implemented")
}
func (UnimplementedBPELProcessServiceServer) GetProcess(context.Context, *GetProcessRequest) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (UnimplementedBPELProcessServiceServer) UpdateProcess(context.Context, *Process) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcess not implemented")
}
func (UnimplementedBPELProcessServiceServer) DeleteProcess(context.Context, *GetProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcess not implemented")
}
func (UnimplementedBPELProcessServiceServer) DeleteAllProcesses(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllProcesses not implemented")
}
func (UnimplementedBPELProcessServiceServer) GetAllProcesses(context.Context, *emptypb.Empty) (*GetAllProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProcesses not implemented")
}
func (UnimplementedBPELProcessServiceServer) ExecuteProcess(context.Context, *ExecuteProcessRequest) (*ExecuteProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteProcess not implemented")
}
func (UnimplementedBPELProcessServiceServer) Publish(context.Context, *PublishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBPELProcessServiceServer) Subscribe(context.Context, *SubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBPELProcessServiceServer) GetProcessStatus(context.Context, *GetProcessStatusRequest) (*GetProcessStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessStatus not implemented")
}
func (UnimplementedBPELProcessServiceServer) mustEmbedUnimplementedBPELProcessServiceServer() {}

// UnsafeBPELProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BPELProcessServiceServer will
// result in compilation errors.
type UnsafeBPELProcessServiceServer interface {
	mustEmbedUnimplementedBPELProcessServiceServer()
}

func RegisterBPELProcessServiceServer(s grpc.ServiceRegistrar, srv BPELProcessServiceServer) {
	s.RegisterService(&BPELProcessService_ServiceDesc, srv)
}

func _BPELProcessService_CreateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).CreateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_CreateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).CreateProcess(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_GetProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_UpdateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).UpdateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_UpdateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).UpdateProcess(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_DeleteProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).DeleteProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_DeleteProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).DeleteProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_DeleteAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).DeleteAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_DeleteAllProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).DeleteAllProcesses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_GetAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).GetAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_GetAllProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).GetAllProcesses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_ExecuteProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).ExecuteProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_ExecuteProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).ExecuteProcess(ctx, req.(*ExecuteProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BPELProcessService_GetProcessStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPELProcessServiceServer).GetProcessStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BPELProcessService_GetProcessStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPELProcessServiceServer).GetProcessStatus(ctx, req.(*GetProcessStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BPELProcessService_ServiceDesc is the grpc.ServiceDesc for BPELProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BPELProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bpel.BPELProcessService",
	HandlerType: (*BPELProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProcess",
			Handler:    _BPELProcessService_CreateProcess_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _BPELProcessService_GetProcess_Handler,
		},
		{
			MethodName: "UpdateProcess",
			Handler:    _BPELProcessService_UpdateProcess_Handler,
		},
		{
			MethodName: "DeleteProcess",
			Handler:    _BPELProcessService_DeleteProcess_Handler,
		},
		{
			MethodName: "DeleteAllProcesses",
			Handler:    _BPELProcessService_DeleteAllProcesses_Handler,
		},
		{
			MethodName: "GetAllProcesses",
			Handler:    _BPELProcessService_GetAllProcesses_Handler,
		},
		{
			MethodName: "ExecuteProcess",
			Handler:    _BPELProcessService_ExecuteProcess_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _BPELProcessService_Publish_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _BPELProcessService_Subscribe_Handler,
		},
		{
			MethodName: "GetProcessStatus",
			Handler:    _BPELProcessService_GetProcessStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bpel.proto",
}
